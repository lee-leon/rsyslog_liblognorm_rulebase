# set the default permissions for all log files.
$FileOwner syslog
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022
$PrivDropToUser syslog
$PrivDropToGroup syslog

# Use traditional timestamp format.
# To enable high precision timestamps, comment out the following line.
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# filter duplicated messages, commented out as we want all of the logs received:
# $RepeatedMsgReduction on

$WorkDirectory /var/spool/rsyslog

# Include all config files in /etc/rsyslog.d/
# $IncludeConfig /etc/rsyslog.d/*.conf

# inbound logs via tcp are headed to elasticsearch:
module (load="imtcp")
input (type="imtcp" port="1514" ruleset="tcp-to-elasticsearch")

# sudo apt-get install rsyslog-mmnormalize:
module(load="mmnormalize")

# sudo apt-get install rsyslog-elasticsearch:
module(load="omelasticsearch")

# $IncludeConfig /etc/rsyslog.d/*.template

# note: use Logstash-style conventions so the logs work with Kibana.

# make index names like "logstash-YYYY.MM.DD" using date/time of now:
template(name="logstash-index" type="list") {
    constant(value="logstash-")
    property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
    constant(value=".")
    property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
    constant(value=".")
    property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
}

# format syslogs in elasticsearch-friendly JSON with @timestamp (like logstash):
template(name="plain-syslog" type="list") {
    constant(value="{")
      constant(value="\"@timestamp\":\"")           property(name="timereported" dateFormat="rfc3339")
      constant(value="\",\"received_at\":\"")       property(name="timegenerated" dateFormat="rfc3339")
      constant(value="\",\"host\":\"")              property(name="fromhost")
      constant(value="\",\"syslog_program\":\"")    property(name="programname")
      # Apr 2014: these properties are not so useful:
      # constant(value="\",\"appname\":\"")         property(name="app-name")
      # constant(value="\",\"severity_num\":\"")    property(name="syslogfacility")
      # constant(value="\",\"severity\":\"")        property(name="syslogseverity-text")
      # constant(value="\",\"facility_num\":\"")    property(name="syslogfacility")
      # constant(value="\",\"facility\":\"")        property(name="syslogfacility-text")
      # constant(value="\",\"tag\":\"")             property(name="syslogtag")
      # Apr 2014:
      # (1) due to RFC3164 there will always be a leading space in message, fix using position.from="2"
      # (2) msg's containing double quotes need to be escaped for elasticsearch, so use format="jsonr"
      constant(value="\",\"syslog_message\":\"")    property(name="msg" position.from="2" format="jsonr")
      constant(value="\",\"message\":\"")           property(name="rawmsg" format="jsonr")
    constant(value="\"}")
}

# format syslogs in elasticsearch-friendly JSON with @timestamp (like logstash):
template(name="sshd-syslog" type="list") {
    constant(value="{")
      constant(value="\"@timestamp\":\"")           property(name="timereported" dateFormat="rfc3339")
      constant(value="\",\"received_at\":\"")       property(name="timegenerated" dateFormat="rfc3339")
      constant(value="\",\"host\":\"")              property(name="fromhost")
      constant(value="\",\"syslog_hostname\":\"")   property(name="$!message_host")
      constant(value="\",\"syslog_program\":\"")    property(name="programname")
      # Apr 2014:
      # (1) due to RFC3164 there will always be a leading space in message, fix using position.from="2"
      # (2) msg's containing double quotes need to be escaped for elasticsearch, so use format="jsonr"
      constant(value="\",\"syslog_message\":\"")    property(name="msg" position.from="2" format="jsonr")
      constant(value="\",\"message\":\"")           property(name="rawmsg" format="jsonr")
      constant(value="\",\"sshd\": {")
        constant(value="\"authmethod\":\"")         property(name="$!authmethod")
        constant(value="\",\"username\":\"")        property(name="$!username")
        constant(value="\",\"device\":\"")          property(name="$!device")
        constant(value="\",\"port\":\"")            property(name="$!port")
        constant(value="\",\"service\":\"")         property(name="$!service")
      constant(value="\"}")
    constant(value="}")
}

# send tcp inbound logs to Elasticsearch:
Ruleset (name="tcp-to-elasticsearch") {
  # note: even if none of the rules in /etc/rsyslog.d/*.rulebase are
  #       matched a message, without any fields, is still sent to elasticsearch.
  if $programname == 'sshd' then {
    action(type="mmnormalize" useRawMsg="on" ruleBase="/etc/rsyslog.d/sshd.rulebase")
    action(type="omelasticsearch"
      # don't wait for docs to be indexed on replicas:
      asyncrepl="on"
      bulkmode="on"
      queue.type="linkedlist"
      queue.size="5000"
      queue.dequeuebatchsize="500"
      action.resumeretrycount="-1"
      server="x.x.x.x"
      serverport="9200"
      template="sshd-syslog"
      searchIndex="logstash-index"
      dynSearchIndex="on")
  } else {
    # default for any unknown program names with no rulebase/parsing just "as is"
    action(type="omelasticsearch"
      # don't wait for docs to be indexed on replicas:
      asyncrepl="on"
      # don't do these during testing:
      # bulkmode="on"
      # queue.type="linkedlist"
      # queue.size="5000"
      # queue.dequeuebatchsize="500"
      # action.resumeretrycount="-1"
      server="x.x.x.x"
      serverport="9200"
      template="plain-syslog"
      searchIndex="logstash-index"
      dynSearchIndex="on")
  }
}
